#!/usr/bin/env python
import os
import sys

from SCons.Script import ARGUMENTS, Default, Glob, SConscript, Variables

eos_sdk_override = ARGUMENTS.pop("EOS_SDK_PATH", None)

env = SConscript("godot-cpp/SConstruct")

if eos_sdk_override:
    env["EOS_SDK_PATH"] = eos_sdk_override

vars = Variables()
vars.Add("EOS_SDK_PATH", "Directory containing the EOS SDK", env.get("EOS_SDK_PATH", "eos_sdk"))
vars.Update(env)

# For reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

# EOS SDK configuration
eos_sdk = os.path.normpath(env["EOS_SDK_PATH"])
env.Append(CPPPATH=["src/", eos_sdk + "/Include"])


if env["platform"] == "windows":
    env.Append(LIBPATH=[eos_sdk + "/Lib"])
    env.Append(LIBS=["EOSSDK-Win64-Shipping"])
    # Enable C++ exception handling to fix C4530 warning
    env.Append(CXXFLAGS=["/EHsc"])
elif env["platform"] == "linux":
    env.Append(LIBPATH=[eos_sdk + "/Bin"])
    env.Append(LIBS=["EOSSDK-Linux-Shipping"])

sources = Glob("src/*.cpp")
sources += Glob("src/Utils/*.cpp")
sources += Glob("src/Platform/*.cpp")
sources += Glob("src/Authentication/*.cpp")
sources += Glob("src/Achievements/*.cpp")
sources += Glob("src/Friends/*.cpp")
sources += Glob("src/Leaderboards/*.cpp")
sources += Glob("src/UserInfo/*.cpp")

if env["target"] in ["editor", "template_debug"]:
    try:
        doc_data = env.GodotCPPDocData("src/gen/doc_data.gen.cpp", source=Glob("doc_classes/*.xml"))
        sources.append(doc_data)
    except AttributeError:
        print("Not including class reference as we're targeting a pre-4.3 baseline.")

if env["platform"] == "macos":
    library = env.SharedLibrary(
        "demo/bin/libgodotepic.{}.{}.framework/libgodotepic.{}.{}".format(
            env["platform"], env["target"], env["platform"], env["target"]
        ),
        source=sources,
    )
elif env["platform"] == "ios":
    if env["ios_simulator"]:
        library = env.StaticLibrary(
            "demo/bin/libgodotepic.{}.{}.simulator.a".format(env["platform"], env["target"]),
            source=sources,
        )
    else:
        library = env.StaticLibrary(
            "demo/bin/libgodotepic.{}.{}.a".format(env["platform"], env["target"]),
            source=sources,
        )
else:
    library = env.SharedLibrary(
        "demo/bin/libgodotepic{}{}".format(env["suffix"], env["SHLIBSUFFIX"]),
        source=sources,
    )

# Copy EOSSDK libraries and build artifacts to both demo/bin and addons/godot_epic/bin
import shutil

def copy_build_artifacts(target, source, env):
    platform = env["platform"]

    # Define destination directories
    demo_bin_dir = os.path.join("demo", "bin")
    addon_bin_dir = os.path.join("..", "addons", "godot_epic", "bin")

    # Ensure destination directories exist
    os.makedirs(demo_bin_dir, exist_ok=True)
    os.makedirs(addon_bin_dir, exist_ok=True)

    # Copy EOS SDK libraries
    eos_lib_src = None
    eos_lib_name = None

    if platform == "windows":
        eos_lib_src = os.path.join(eos_sdk, "Bin", "EOSSDK-Win64-Shipping.dll")
        eos_lib_name = "EOSSDK-Win64-Shipping.dll"
    elif platform == "linux":
        eos_lib_src = os.path.join(eos_sdk, "Bin", "libEOSSDK-Linux-Shipping.so")
        eos_lib_name = "libEOSSDK-Linux-Shipping.so"
    elif platform == "macos":
        eos_lib_src = os.path.join(eos_sdk, "Bin", "libEOSSDK-Mac-Shipping.dylib")
        eos_lib_name = "libEOSSDK-Mac-Shipping.dylib"

    if eos_lib_src and os.path.exists(eos_lib_src):
        # Copy to demo/bin
        demo_eos_dst = os.path.join(demo_bin_dir, eos_lib_name)
        shutil.copy2(eos_lib_src, demo_eos_dst)
        print(f"Copied {eos_lib_name} to demo/bin/")

        # Copy to addons/godot_epic/bin
        addon_eos_dst = os.path.join(addon_bin_dir, eos_lib_name)
        shutil.copy2(eos_lib_src, addon_eos_dst)
        print(f"Copied {eos_lib_name} to addons/godot_epic/bin/")
    elif eos_lib_src:
        print(f"Warning: {eos_lib_name} not found at {eos_lib_src}")

    # Copy built GDExtension library
    built_lib_path = str(target[0])
    built_lib_name = os.path.basename(built_lib_path)

    if os.path.exists(built_lib_path):
        # Copy to addons/godot_epic/bin
        addon_lib_dst = os.path.join(addon_bin_dir, built_lib_name)
        shutil.copy2(built_lib_path, addon_lib_dst)
        print(f"Copied {built_lib_name} to addons/godot_epic/bin/")

        # For macOS frameworks, copy the entire framework directory
        if platform == "macos" and built_lib_path.endswith(".framework/libgodotepic.macos.template_debug") or built_lib_path.endswith(".framework/libgodotepic.macos.template_release"):
            framework_dir = os.path.dirname(built_lib_path)
            framework_name = os.path.basename(framework_dir)
            addon_framework_dst = os.path.join(addon_bin_dir, framework_name)
            if os.path.exists(framework_dir):
                if os.path.exists(addon_framework_dst):
                    shutil.rmtree(addon_framework_dst)
                shutil.copytree(framework_dir, addon_framework_dst)
                print(f"Copied framework {framework_name} to addons/godot_epic/bin/")
    else:
        print(f"Warning: Built library {built_lib_path} not found")

# Add post-build action to copy build artifacts for supported platforms
if env["platform"] in ["windows", "linux", "macos"]:
    env.AddPostAction(library, copy_build_artifacts)

Default(library)
