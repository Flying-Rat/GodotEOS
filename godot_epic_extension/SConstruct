#!/usr/bin/env python
import os
import sys

env = SConscript("godot-cpp/SConstruct")

# For reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

# EOS SDK configuration
eos_sdk = "eos_sdk"
env.Append(CPPPATH=["src/", eos_sdk + "/Include"])


if env["platform"] == "windows":
    env.Append(LIBPATH=[eos_sdk + "/Lib"])
    env.Append(LIBS=["EOSSDK-Win64-Shipping"])
elif env["platform"] == "linux":
    env.Append(LIBPATH=[eos_sdk + "/Bin"])
    env.Append(LIBS=["EOSSDK-Linux-Shipping"])

sources = Glob("src/*.cpp")
sources += Glob("src/Utils/*.cpp")
sources += Glob("src/Platform/*.cpp")
sources += Glob("src/Authentication/*.cpp")
sources += Glob("src/Achievements/*.cpp")
sources += Glob("src/Friends/*.cpp")
sources += Glob("src/Leaderboards/*.cpp")
sources += Glob("src/UserInfo/*.cpp")

if env["target"] in ["editor", "template_debug"]:
    try:
        doc_data = env.GodotCPPDocData("src/gen/doc_data.gen.cpp", source=Glob("doc_classes/*.xml"))
        sources.append(doc_data)
    except AttributeError:
        print("Not including class reference as we're targeting a pre-4.3 baseline.")

if env["platform"] == "macos":
    library = env.SharedLibrary(
        "demo/bin/libgodotepic.{}.{}.framework/libgodotepic.{}.{}".format(
            env["platform"], env["target"], env["platform"], env["target"]
        ),
        source=sources,
    )
elif env["platform"] == "ios":
    if env["ios_simulator"]:
        library = env.StaticLibrary(
            "demo/bin/libgodotepic.{}.{}.simulator.a".format(env["platform"], env["target"]),
            source=sources,
        )
    else:
        library = env.StaticLibrary(
            "demo/bin/libgodotepic.{}.{}.a".format(env["platform"], env["target"]),
            source=sources,
        )
else:
    library = env.SharedLibrary(
        "demo/bin/libgodotepic{}{}".format(env["suffix"], env["SHLIBSUFFIX"]),
        source=sources,
    )

# Copy EOSSDK libraries to demo/bin for all platforms
import shutil

def copy_eos_library(target, source, env):
    platform = env["platform"]

    if platform == "windows":
        eos_lib_src = os.path.join(eos_sdk, "Bin", "EOSSDK-Win64-Shipping.dll")
        eos_lib_dst = os.path.join("demo", "bin", "EOSSDK-Win64-Shipping.dll")
        lib_name = "EOSSDK-Win64-Shipping.dll"
    elif platform == "linux":
        eos_lib_src = os.path.join(eos_sdk, "Bin", "libEOSSDK-Linux-Shipping.so")
        eos_lib_dst = os.path.join("demo", "bin", "libEOSSDK-Linux-Shipping.so")
        lib_name = "libEOSSDK-Linux-Shipping.so"
    elif platform == "macos":
        eos_lib_src = os.path.join(eos_sdk, "Bin", "libEOSSDK-Mac-Shipping.dylib")
        eos_lib_dst = os.path.join("demo", "bin", "libEOSSDK-Mac-Shipping.dylib")
        lib_name = "libEOSSDK-Mac-Shipping.dylib"
    else:
        return  # Unsupported platform

    if os.path.exists(eos_lib_src):
        # Ensure the destination directory exists
        os.makedirs(os.path.dirname(eos_lib_dst), exist_ok=True)
        shutil.copy2(eos_lib_src, eos_lib_dst)
        print(f"Copied {lib_name} to demo/bin/")
    else:
        print(f"Warning: {lib_name} not found at {eos_lib_src}")

# Add post-build action to copy the EOS SDK library for supported platforms
if env["platform"] in ["windows", "linux", "macos"]:
    env.AddPostAction(library, copy_eos_library)

Default(library)
